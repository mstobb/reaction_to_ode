#!/usr/bin/python
# Python code that generates a Matlab 'm' file of ODEs from Law of Mass action stoichiometry matrix
# 
# Use: make_ode_m_file.py foo.txt foo.m
#
# foo must by a CSV file of the stoichiometry matrix, usually generated by make_stoich_matrix.py
#
# Created by Michael T. Stobb
# Created on 1/28/15

try:
     from tabulate import tabulate
except ImportError:
     print " ************************************************ \n"
     print " * Python tabulate module not found....         * \n"
     print " * Consider running: sudo pip install tabulate  * \n"
     print " *           THIS IS OPTIONAL                   * \n"
     print " ************************************************ \n"
     from pprint import pprint as pp

import re , sys, types, csv, textwrap

if len(sys.argv) == 1:
     print textwrap.dedent("""

 Python code that generates a Matlab 'm' file of ODEs from Law of Mass action stoichiometry matrix
 
 Use: make_ode_m_file.py foo.txt foo.m

 foo must by a CSV file of the stoichiometry matrix, usually generated by make_stoich_matrix.py
	""")
else:
	input_file = sys.argv[1]
	print "Opening Input File: ", input_file
	reactions = open(input_file)
	print "\n"
	
	row_num = 0
	col_num = 0
	with open(input_file, 'rb') as f:
		    reader = csv.reader(f)
		    stoich_matrix_file = map(tuple, reader)
	
	#print stoich_matrix
	
	numrows = len(stoich_matrix_file)
	numcols = len(stoich_matrix_file[0])
	
	#print numrows
	#print numcols
	
	species_list = [None]*(numrows-1)
	rates_list = [None]*(numcols-1)
	stoich_matrix = [[0 for x in range(numcols-1)] for x in range(numrows-1)] 
	
	for i in range(1,numrows):
		species_list[i-1] = stoich_matrix_file[i][0]
		#print species_list
	
	for i in range(1,numcols):
		rates_list[i-1] = stoich_matrix_file[0][i]
		#print rates_list
	
	for i in range(1,numcols):
		for j in range(1,numrows):
			stoich_matrix[j-1][i-1] = stoich_matrix_file[j][i]
			#print tabulate(stoich_matrix)
	
	if len(stoich_matrix_file) < 30:
		print "Reaction Table to be used:"
		try:
			print tabulate(stoich_matrix_file)
		except:
			pp(stoich_matrix_file)
	
	print "\nNumber of species found: ",numrows-1
	print "Number of rates found: ",numcols-1
	
	num_species = numrows-1
	num_rates = numcols-1
	
	
	###############################################################################
	###################         Making M file now         #########################
	###############################################################################
	
	try:
		output_file = sys.argv[2]
		output_matlab = output_file.strip(".m")
	except:
		output_file = input_file.split('.')
		output_file = output_file[0]
		output_matlab = output_file
		output_file+=".m"
	print '\nOutput File: \n', output_file
	print "\n"
	f = open(output_file,'w')
	
	f.write("function [time,y] = ")
	f.write(output_matlab)
	f.write("(t_final,t_start)\n")
	f.write("% Solves a system of ODEs from t=t_start to t=t_final \n")
	f.write("% If no start time is given, then t_start = 0 \n")
	f.write("% If no start or final time is given, then t_start = 0, t_final = 1 \n")
	f.write("%\n")
	f.write("%\n")
	f.write("% This file was created by issuing command: \n")
	f.write("% 	python make_ode_m_file.py ")
	f.write(input_file)
	f.write(" ")
	f.write(output_file)
	f.write("\n")
	f.write("%\n")
	f.write("\n")
	f.write("\nif nargin == 1\n")
	f.write("     t_start = 0;  % Default start time is 0 \n")
	f.write("elseif nargin == 0\n")
	f.write("     t_start = 0; % Default start time is 0\n")
	f.write("     t_final = 1; % Default final time is 1\n")
	f.write("end\n\n\n")
	
	f.write("% Kinetic Parameters \n")
	for i in range(0,num_rates):
		f.write(str(rates_list[i]))
		f.write(" = 1; \n")
	
	f.write("\np = [ ")
	f.write(str(rates_list[0]))
	for i in range(1,num_rates):
		f.write(", ")
		f.write(str(rates_list[i]))
	f.write("];\n\n\n")
	
	
	f.write("% Initial Conditions \n")
	for i in range(0,num_species):
		f.write(species_list[i])
		f.write("_IC")
		f.write(" = 0; \n")
	
	f.write("\ninit_cond = [ ")
	f.write(str(species_list[0]))
	f.write("_IC")
	for i in range(1,num_species):
		f.write(", ")
		f.write(str(species_list[i]))
		f.write("_IC")
	f.write("];\n\n\n")
	
	f.write("options = odeset('RelTol',1e-12,'AbsTol',1e-23);\n\n\n")
	
	f.write("%------------------------------ Main Solve ---------------------------%\n")
	f.write("[time,y] = ode15s(@(t,y)RHS(t,y,p), [t_start t_final], init_cond, options);\n")
	f.write("%---------------------------------------------------------------------%\n\n\n")
	
	f.write("% Rename solution components\n")
	for i in range(0,num_species):
		f.write(species_list[i])
		f.write(" = y(:,")
		f.write(str(i+1))
		f.write("); \n")
	
	f.write("\n\n\n")
	
	f.write("%  \n")
	f.write("% Place plots or other calculations here\n")
	f.write("%   \n")
	f.write("% Example: \n")
	f.write("% plot(time, ")
	f.write(str(species_list[0]))
	f.write(", 'k-o', 'LineWidth', 4, 'MarkerSize', 4); legend('")
	f.write(str(species_list[0]))
	f.write("');\n\n\n")
	
	f.write("end\n\n\n\n")
	
	f.write("%-----------------------------------------------------%\n")
	f.write("%-------------------- RHS Function -------------------%\n")
	f.write("%-----------------------------------------------------%\n\n")
	
	
	f.write("function dy = RHS(t,y,p)\n\n")
	f.write("dy = zeros(") 
	f.write(str(num_species))
	f.write(",1);\n")
	f.write("\n\n")
	
	f.write("% Rename Variables \n\n")
	
	for i in range(0,num_species):
		f.write(str(species_list[i]))
		f.write("   = y(")
		f.write(str(i+1))
		f.write("); \n")
	f.write("\n\n")
	
	f.write("% Rename Kinetic Parameters \n")
	for i in range(0,num_rates):
		f.write(str(rates_list[i]))
		f.write(" = p(")
		f.write(str(i+1))
		f.write(");  \n")
	
	f.write("\n\n")
	
	if len(stoich_matrix_file) < 30:
		f.write("% Reactions to be used \n\n")
		f.write("%{ \n\n")
	
		try:
			f.write(tabulate(stoich_matrix_file))
		except:
			for i in range(0,num_species+1):
				f.write(str((stoich_matrix_file[i])))
				f.write("\n")
	
		f.write("\n\n%} \n\n")
	
	f.write("\n\n")
	
	f.write("% ODEs from reaction equations \n\n")
	
	print "Writing ODEs now....\n"
	
	for i in range(0,num_species):
		f.write("% ")
		f.write(str(species_list[i]))
		f.write("\n dy(")
		f.write(str(i+1))
		f.write(")  =")
		for j in range(0,num_rates):
			if int(stoich_matrix[i][j]) < 0:
				f.write("  -  ")
				f.write(str(rates_list[j]))
				for k in range(0,num_species):
					if int(stoich_matrix[k][j]) < 0:
						f.write(" * ")
						f.write(species_list[k])
						if abs(int(stoich_matrix[k][j])) != 1:
							f.write("^")
							f.write(str(abs(int(stoich_matrix[k][j]))))
			elif int(stoich_matrix[i][j]) > 0:
				f.write("  +  ")
				f.write(str(rates_list[j]))
				for k in range(0,num_species):
					if int(stoich_matrix[k][j]) < 0:
						f.write(" * ")
						if int(stoich_matrix[i][j]) > 1:
							f.write(str(int(stoich_matrix[i][j])))
							f.write(" * ")
						f.write(species_list[k])
						if abs(int(stoich_matrix[k][j])) != 1:
							f.write("^")
							f.write(str(abs(int(stoich_matrix[k][j]))))
		print species_list[i]," complete"
		f.write(";\n\n")


	f.write("\n\n\n\n")
	f.write("end")

	print "\nFile written successfully"
